/**
 * 
 */
package com.jnwat.analysis;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.os.Handler;

import com.jnwat.bean.BTaskInfo;
import com.jnwat.bean.BTaskInfo_DetailForm;
import com.jnwat.bean.UnEducationBean;
import com.jnwat.config.ShowRemind;
import com.jnwat.tools.JsonTools;
import com.lidroid.xutils.util.LogUtils;

/**
 * @author zhaorl
 *
 *@category 获取非教学工作信息
 *
 */
public class AGetUnEducationMessage {

	/**
	 *  @return UnEducationBean
	 *  
	 * 解析返回的列表
	 * 
	 * @throws JSONException 
	 * 
	 */
	public List<UnEducationBean> getUnEducationList(String result, Handler mHandler) throws JSONException{
     LogUtils.d(result);
	 List<UnEducationBean> listdate  =  new ArrayList<UnEducationBean>();
	 JSONObject json   = new JSONObject(result);
	 JSONArray array =  json.getJSONArray("ReplyObject");
	 if(array!=null&&array.length()>0){
		 for(int i=0;i<array.length();i++){
			 
			   String date = array.getJSONObject(i).getString("Classdate");
			    
			   JSONArray jsonArr  = array.getJSONObject(i).getJSONArray("Schedule");
			   
			   for(int k=0;k<jsonArr.length();k++){
				   
				   
				   
			   }
			   
			   
//				String workId  = array.optJSONObject(i).getString("Workid");
//				String type  = array.optJSONObject(i).getString("Type");
//				String content  = array.optJSONObject(i).getString("Content");
//				String start =  array.optJSONObject(i).getString("Startdate");
//				String end =  array.optJSONObject(i).getString("Enddate");
//				
//				bean.setTitle(content);
//				bean.setWorkId(workId);
//				bean.setType(type);
//				bean.setStartTime(start);
//				bean.setEndTime(end);
//				bean.setContent(content);
//				listdate.add(bean);
				
			 }
	 }else{
		 
		 listdate = null;
	 }
	 
		return listdate;
		
	}
	
	/**
	 * 解析返回的数据
	 * 
	 * @return UnEducationBean
	 *  
	 *  
	 */
	
	public UnEducationBean analysisUnEducated(String result, Handler mHandler) {
		LogUtils.d(result);
		UnEducationBean bean  = new UnEducationBean();
        Map<String,Object> map  = null;
		try {
			JSONObject mjsonobject = new JSONObject(result);
			String Message = mjsonobject.get("Message").toString().trim();// 错误提示信息
			ShowRemind.ErrorMessage = Message;
			int Status = mjsonobject.getInt("Status");

			if (0 != Status && Status == 200) {  // 如果拿到的值是正确的继续解析
				JSONObject msonobject = mjsonobject
						.getJSONObject("ReplyObject");
				
				if(!msonobject.getString("Type").equals("")){
					map = new HashMap<String,Object>();
					map.put("index", "类别");
					map.put("value", msonobject.getString("Type"));
					bean.list.add(map);
				}
				
				 if(!msonobject.getString("Starttime").equals("")){
					map = new HashMap<String,Object>();
					map.put("index", "开始时间");
					map.put("value", msonobject.getString("Starttime"));
					bean.list.add(map);
				}
				 if(!msonobject.getString("Endtime").equals("")){
					map = new HashMap<String,Object>();
					map.put("index", "结算时间");
					map.put("value", msonobject.getString("Endtime"));
					bean.list.add(map);
				} if(!msonobject.getString("Worktime").equals("")){
					map = new HashMap<String,Object>();
					map.put("index", "工作量");
					map.put("value", msonobject.getString("Worktime"));
					bean.list.add(map);
				}
				if(!msonobject.getString("Content").equals("")){
					map = new HashMap<String,Object>();
					map.put("index", "具体内容");
					map.put("value", msonobject.getString("Content"));
					bean.list.add(map);
				}
				
				
				mHandler.sendEmptyMessage(Status);
				return bean;

			} else {// 解析错误编码，提示用户
				LogUtils.d("解析BUserlogin错误代码:" + Status);
				mHandler.sendEmptyMessage(Status);
				return bean;
			}

		} catch (JSONException e) {
			// TODO Auto-generated catch block
			LogUtils.d("登录解析异常");
			mHandler.sendEmptyMessage(ShowRemind.HANDLER_NET_ERROE);
			e.printStackTrace();
		}
		return bean;

	}
	
	
}
