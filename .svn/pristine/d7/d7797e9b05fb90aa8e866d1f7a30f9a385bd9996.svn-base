package com.jnwat.swmobilegy.workevent;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.text.format.DateUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.TextView;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.jnwat.analysis.AUserTasks;
import com.jnwat.bean.BIntentObj;
import com.jnwat.bean.BUserTasks;
import com.jnwat.bean.BUserlogin;
import com.jnwat.config.AppConfig;
import com.jnwat.config.ShowRemind;
import com.jnwat.swmobilegy.R;
import com.jnwat.swmobilegy.dapter.AdapterTaskInfo;
import com.jnwat.tools.ToastViewTools;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.bitmap.PauseOnScrollListener;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;
import com.lidroid.xutils.util.LogUtils;

/**
 * @author chang-zhiyuan 待办
 */
public class DoProcessFragment extends Fragment {
	private View view;
	private PullToRefreshListView lv_workevent_doprogcess;
	private BitmapUtils bitmapUtils;
	private ArrayList<BUserTasks> mArrayListUserTasks;
	private AUserTasks mAUserTasks;
	private HttpUtils http;
	private boolean allowFresh = false;
	private TextView showTip_txt;
	private AdapterTaskInfo mAdapterTaskInfo;
	private boolean isFirst = true;
	private Activity mContext;

	static DoProcessFragment newInstance(String s) {
		DoProcessFragment newFragment = new DoProcessFragment();
		Bundle bundle = new Bundle();
		newFragment.setArguments(bundle);
		return newFragment;

	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub

		if (view == null) {
			view = inflater.inflate(R.layout.fragment_listview_doprocess, null);
		}
		if (isFirst) {// 控制网络加载
			initView();
			initData();
			// 加载数据
			isFirst = false;
		}
		ViewGroup parent = (ViewGroup) view.getParent();
		if (parent != null) {
			parent.removeView(view);
		}
		return view;

	}

	/**
	 * 设置视图
	 */
	public void initView() {
		showTip_txt = (TextView) view.findViewById(R.id.showTip_txt);
		lv_workevent_doprogcess = (PullToRefreshListView) view
				.findViewById(R.id.lv_workevent_doprogcess);

	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		bitmapUtils = new BitmapUtils(getActivity().getApplicationContext());
		http = new HttpUtils();
		http.configTimeout(4000);
		http.configCurrentHttpCacheExpiry(20); // 缓存时间
		mAUserTasks = new AUserTasks();
		mArrayListUserTasks = new ArrayList<BUserTasks>();
		mContext = this.getActivity();
	}

	/**
	 * 初始化数据
	 */
	public void initData() {
		lv_workevent_doprogcess.setOnScrollListener(new PauseOnScrollListener(
				bitmapUtils, false, true));
		lv_workevent_doprogcess
				.setOnRefreshListener(new OnRefreshListener<ListView>() {
					@Override
					public void onRefresh(
							PullToRefreshBase<ListView> refreshView) {
						String label = DateUtils.formatDateTime(getActivity(),
								System.currentTimeMillis(),
								DateUtils.FORMAT_SHOW_TIME
										| DateUtils.FORMAT_SHOW_DATE
										| DateUtils.FORMAT_ABBREV_ALL);
						// Update the LastUpdatedLabel
						refreshView.getLoadingLayoutProxy()
								.setLastUpdatedLabel(label);

						showTip_txt.setVisibility(View.GONE);

						// Do work to refresh the list here.
						if (lv_workevent_doprogcess.isHeaderShown()) {// 显示头部UI
							if (BUserlogin.loginStatus == 1) {
								mHandler.sendEmptyMessageDelayed(-10, 100);

							} else {
								mHandler.sendEmptyMessageDelayed(0, 100);
							}
							LogUtils.d("待办 显示头部UI");
						} else if (lv_workevent_doprogcess.isFooterShown()) {// 显示底部UI
							// 加载更多
						} else {
							// 网络请求
							LogUtils.d("待办初始化网络数据");
							allowFresh = true;
							if (BUserlogin.loginStatus == 1) {
								if (mArrayListUserTasks.size() > 0) {
									mArrayListUserTasks.clear();
								}
								getUserTasks();
							} else {
								mHandler.sendEmptyMessageDelayed(0, 100);
								// lv_workevent_doprogcess.onRefreshComplete();
							}
						}

					}
				});
		lv_workevent_doprogcess.setRefreshing(true);
		lv_workevent_doprogcess
				.setOnItemClickListener(new OnItemClickListener() {

					@Override
					public void onItemClick(AdapterView<?> arg0, View arg1,
							int index, long arg3) {
						// TODO Auto-generated method stub
						// 赋值
						BIntentObj.mBUserTasks = mArrayListUserTasks
								.get(index - 1);
						// BIntentObj.mBUserTasks.setSender_Photo("http://pic.nipic.com/2007-11-09/2007119122519868_2.jpg");
						Intent intent = new Intent();
						// intent.putExtra("result", "100");
						BIntentObj.IsAna = true;
						BIntentObj.IsDoProcess = false;
						intent.setClass(getActivity(), MeetingApply.class);
						startActivity(intent);
						// startActivityForResult(intent, 100);
					}
				});

		mAdapterTaskInfo = new AdapterTaskInfo(getActivity(),
				mArrayListUserTasks, bitmapUtils);
		lv_workevent_doprogcess.setAdapter(mAdapterTaskInfo);

	}

	/**
	 * 得到代办流程
	 */
	private void getUserTasks() {
		RequestParams params = new RequestParams(); // 参数
		// params.addHeader("Content-Type",
		// "application/x-www-form-urlencoded");
		if (mArrayListUserTasks.size() > 0) {
			mArrayListUserTasks.clear();
		}
		params.addBodyParameter("loginName", BUserlogin.NO);
		String url = // AppConfig.getIp(mContext)
		AppConfig.METHOAD_GETUSERTASKS_OA;
		LogUtils.e("url：" + url);
		LogUtils.e("BUserlogin.NO：" + BUserlogin.NO);
		http.send(HttpRequest.HttpMethod.POST, url, params,
				new RequestCallBack<String>() {
					@Override
					public void onLoading(long total, long current,
							boolean isUploading) {
					}

					@Override
					public void onSuccess(ResponseInfo<String> responseInfo) {
						LogUtils.e("responseInfo:" + responseInfo.result);
						int status = mAUserTasks.aAUserTasks(
								responseInfo.result, mHandler,
								mArrayListUserTasks);
						BIntentObj.IsDoProcess = false;
						showInfo(status);
						// freshList();
					}

					@Override
					public void onStart() {
					}

					@Override
					public void onFailure(HttpException error, String msg) {
						/*
						 * System.out.println("error:" + error + msg);
						 * mArrayListUserTasks = mAUserTasks.aAUserTasks(
						 * GetRawStringFile.rawRead(getActivity(), R.raw.a1),
						 * mHandler); mAdapterTaskInfo = new
						 * AdapterTaskInfo(getActivity(), mArrayListUserTasks,
						 * bitmapUtils);
						 * lv_workevent_doprogcess.setAdapter(mAdapterTaskInfo);
						 * 
						 * freshList();
						 */
						showInfo(-1); // 连接错误
						// freshList();
					}
				});

	}

	public Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 0:

				lv_workevent_doprogcess.onRefreshComplete();
				break;
			case -10:
				getUserTasks();
				break;
			case ShowRemind.HANDLER_STATUS:
				ToastViewTools
						.initToast(getActivity(), ShowRemind.ErrorMessage);

				break;
			case ShowRemind.HANDLER_SUCCESS:
				freshList();
				break;
			}
		};
	};

	/**
	 * 刷新List
	 */
	private void freshList() {
		if (null != mAdapterTaskInfo) {
			mAdapterTaskInfo.notifyDataSetChanged();
		}
		if (lv_workevent_doprogcess != null) {
			lv_workevent_doprogcess.onRefreshComplete();
		}

	}

	public void showInfo(int status) {
		freshList();
		int size = mArrayListUserTasks.size();
		if (status == 1) {
			showTip_txt.setVisibility(View.GONE);
		} else if (status == 2 && size == 0) { // 当 status 为 2时 说明 正常没有获取 到数据
			// 当没有数据的时候 为了 显示 提示 无数据 关闭 软键盘
			InputMethodManager imm = (InputMethodManager) mContext
					.getSystemService(Context.INPUT_METHOD_SERVICE);
			imm.hideSoftInputFromWindow(showTip_txt.getWindowToken(), 0);
			showTip_txt.setVisibility(View.VISIBLE);
			showTip_txt.setText("暂无数据");
		} else if (status == 0 && size == 0) {
			InputMethodManager imm = (InputMethodManager) mContext
					.getSystemService(Context.INPUT_METHOD_SERVICE);
			imm.hideSoftInputFromWindow(showTip_txt.getWindowToken(), 0);
			showTip_txt.setVisibility(View.VISIBLE);
			showTip_txt.setText("获取待办流程信息息异常");
		} else if (status == -1 && size == 0) {
			InputMethodManager imm = (InputMethodManager) mContext
					.getSystemService(Context.INPUT_METHOD_SERVICE);
			if (showTip_txt != null) {
				imm.hideSoftInputFromWindow(showTip_txt.getWindowToken(), 0);
				showTip_txt.setVisibility(View.VISIBLE);
				showTip_txt.setText("请检查是否登录或网络状况");
			}

		}
	}

	@Override
	public void onResume() {
		// TODO Auto-generated method stub
		super.onResume();

		// 顺序不能乱
		if (BUserlogin.loginStatus == 0) {
			mArrayListUserTasks.clear();
			freshList();
			showInfo(-1);
		}
		if (BUserlogin.loginStatus == 1 && BIntentObj.IsDoProcess == true
				&& view != null && allowFresh == true) {
			if (mArrayListUserTasks.size() > 0) {
				mArrayListUserTasks.clear();
			}

			lv_workevent_doprogcess.setRefreshing();
		}
	}

}