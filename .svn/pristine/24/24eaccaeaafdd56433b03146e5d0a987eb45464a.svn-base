package com.jnwat.swmobilegy.set;

import java.io.File;
import java.io.IOException;

import org.androidpn.client.NotificationSettingsActivity;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.jnwat.bean.BIntentObj;
import com.jnwat.bean.BUserlogin;
import com.jnwat.bean.UserInfo;
import com.jnwat.config.AppConfig;
import com.jnwat.swmobilegy.R;
import com.jnwat.personDetail.PersonalInfoActivity;
import com.jnwat.swmobilegy.App;
import com.jnwat.swmobilegy.LoginActivity;
import com.jnwat.swmobilegy.SoftDestn;
import com.jnwat.swmobilegy.view.CircleImageView;
import com.jnwat.tools.GetFileCacheSize;
import com.jnwat.tools.SDCardTools;
import com.jnwat.tools.SharedPrefsUtil;
import com.jnwat.tools.ToastViewTools;
import com.jnwat.tools.WriteRawStringFile;
import com.lidroid.xutils.BitmapUtils;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.bitmap.BitmapDisplayConfig;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;
import com.lidroid.xutils.util.LogUtils;

public class SetFragment extends Fragment {
	private View view;
	private TextView txt_userlogin, txt_softDestn, txt_personalData,
			txt_user_name, txt_xiaoxiSettings; //
	private String NO;// 登录的用户名
	private LinearLayout loginLayout;
	private TextView updateMaillist, txt_cachesize, tv_modifyip;
	private App mApp;
	private Activity mContext;
	private LinearLayout lin_clearcache;
	private BitmapUtils mBitmapUtils;
	private CircleImageView login_head_img;
	private long ContactsFileSize = 0;
	private long size;
	protected HttpUtils http = null;
	private boolean ContactsUpdating = false;// 通讯录是否正在更新 false为没有 true表示正在更新
	private View mDialog, progress_wheel_clearcache, progress_wheel_exit;// 当进行异步操作时显示
																			// 如：进行同步通讯录时
	private LinearLayout updateContactsLayout;
	private Button exitBtn;// 退出账户

	static SetFragment newInstance(String s) {
		SetFragment newFragment = new SetFragment();
		Bundle bundle = new Bundle();
		newFragment.setArguments(bundle);
		return newFragment;
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		if (view == null) {
			view = inflater.inflate(R.layout.fragment_set, null);
			txt_userlogin = (TextView) view.findViewById(R.id.logInfo_txt);
			txt_softDestn = (TextView) view.findViewById(R.id.txt_softDestn);
			// 缓存大小
			txt_cachesize = (TextView) view.findViewById(R.id.txt_cachesize);
			// 头像
			login_head_img = (CircleImageView) view
					.findViewById(R.id.login_head_img);
			// genggaiip
			tv_modifyip = (TextView) view.findViewById(R.id.tv_modifyip);
			loginLayout = (LinearLayout) view.findViewById(R.id.login_layout);
			// 清除缓存
			lin_clearcache = (LinearLayout) view
					.findViewById(R.id.lin_clearcache);
			updateMaillist = (TextView) view
					.findViewById(R.id.txt_update_mailist);
			updateContactsLayout = (LinearLayout) view
					.findViewById(R.id.updateContactsLayout);
			txt_personalData = (TextView) view
					.findViewById(R.id.txt_personlData);
			exitBtn = (Button) view.findViewById(R.id.btnexit);
			txt_user_name = (TextView) view.findViewById(R.id.tv_setname);
			mDialog = view.findViewById(R.id.progress_wheel_updateContacts);
			progress_wheel_clearcache = view
					.findViewById(R.id.progress_wheel_clearcache);
			progress_wheel_exit = view.findViewById(R.id.progress_wheel_exit);
			txt_xiaoxiSettings = (TextView) view
					.findViewById(R.id.tv_xiaoxiSet);
			onClickListener();
			setCacheSize();
			txt_cachesize.setText(size + "M");
			System.out.println("设置:onCreateView");
		}
		ViewGroup parent = (ViewGroup) view.getParent();
		if (parent != null) {
			parent.removeView(view);
		}
		changeLoginState();
		return view;

	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		mContext = this.getActivity();
		mApp = (App) mContext.getApplication();
		mBitmapUtils = new BitmapUtils(getActivity());
		http = new HttpUtils();
		http.configTimeout(2500);
		http.configCurrentHttpCacheExpiry(1500); // 缓存时间
	}

	/**
	 * 清除内存和磁盘缓存
	 */
	private void clearCache() {
		try {
			GetFileCacheSize.delete(new File(SDCardTools.getFilePath()
					.toString()));
		} catch (Exception e) {
			// TODO: handle exception
		}
		mBitmapUtils.clearCache();

	}

	// 更改登录状态
	public void changeLoginState() {

		NO = BUserlogin.Username;
		int state = BUserlogin.loginStatus;
		if (state == 0) {
			txt_userlogin.setText("未登录");
			txt_user_name.setVisibility(View.GONE);
		} else {
			txt_userlogin.setText(NO);
			txt_user_name.setVisibility(View.VISIBLE);
			txt_user_name.setText(BUserlogin.Departmentname);
			BitmapDisplayConfig config = new BitmapDisplayConfig();
			config.setLoadingDrawable(getResources().getDrawable(
					R.drawable.detail_icon_user_default));
			config.setLoadFailedDrawable(getResources().getDrawable(
					R.drawable.detail_icon_user_default));
			System.out.println("BUserlogin.Photo:" + BUserlogin.Photo);
			if (null != BUserlogin.Photo && !BUserlogin.Photo.equals("")) {
				mBitmapUtils.display(login_head_img, BUserlogin.Photo, config);
			}

		}
	}

	/**
	 * 监听方法
	 */
	private void onClickListener() {
		lin_clearcache.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				// TODO Auto-generated method stub
				txt_cachesize.setVisibility(View.INVISIBLE);
				progress_wheel_clearcache.setVisibility(View.VISIBLE);
				// 清除缓存
				clearCache();
				setCacheSize();
				mainHandler.sendEmptyMessageDelayed(201, 600);

			}
		});

		txt_xiaoxiSettings.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(mContext,
						NotificationSettingsActivity.class);
				startActivity(intent);
			}
		});
		loginLayout.setOnClickListener(new OnClickListener() {// 跳转到登录

					@Override
					public void onClick(View arg0) {
						// TODO Auto-generated method stub
						/*
						 * if (BUserlogin.loginStatus == 1) {
						 */// }else{
						Intent intent = new Intent();
						intent.setClass(getActivity(), LoginActivity.class);
						startActivity(intent);
						// }

					}
				});
		exitBtn.setOnClickListener(new OnClickListener() {// 跳转到登录

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if (BUserlogin.loginStatus == 1) {
					BIntentObj.recover();
					BUserlogin.loginStatus = 0;
					BUserlogin.userid ="";
					BUserlogin.Username="";
					login_head_img.setImageResource(R.drawable.detail_icon_user_default);
					changeLoginState();
					UserInfo user = new UserInfo();
					com.jnwat.tools.SharedPrefsUtil
							.putUserLogin(mContext, user);

					exitBtn.setVisibility(View.GONE);
					progress_wheel_exit.setVisibility(View.VISIBLE);
					new delay_exit().execute();

				} else {
					ToastViewTools.initToast(mContext, "请先登录");
				}
			}
		});
		// 点击同步通讯录
		updateMaillist.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if (ContactsUpdating == false) {
					showUpdateTip();
					ContactsUpdating = true;
					new Thread(new Runnable() {

						@Override
						public void run() {
							// TODO Auto-generated method stub
							getData();

						}

					}).start();
				}
			}

		});
		updateContactsLayout.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if (ContactsUpdating == false) {
					showUpdateTip();
					ContactsUpdating = true;
					new Thread(new Runnable() {

						@Override
						public void run() {
							// TODO Auto-generated method stub
							getData();

						}

					}).start();
				}
			}

		});
		// 查看个人资料
		txt_personalData.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if(BUserlogin.loginStatus==1){
					Intent intent = new Intent();
					intent.setClass(mContext, PersonalInfoActivity.class);
					startActivity(intent);
				}else if(BUserlogin.loginStatus==0){
					Intent intent = new Intent();
					intent.setClass(mContext, LoginActivity.class);
					startActivity(intent);
				}
			}

		});
		txt_softDestn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				Intent intent = new Intent();
				intent.setClass(mContext, SoftDestn.class);
				mContext.startActivity(intent);
			}

		});
		tv_modifyip.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub

				LayoutInflater factory = LayoutInflater.from(getActivity());// 提示框
				final View view = factory.inflate(
						R.layout.dialogip_editbox_layout, null);// 这里必须是final的
				final EditText edit = (EditText) view
						.findViewById(R.id.editText);// 获得输入框对象

				new AlertDialog.Builder(getActivity())
						.setTitle("当前IP:" + AppConfig.getIp(getActivity()))
						// 提示框标题
						.setView(view)
						.setPositiveButton(
								"修改",// 提示框的两个按钮
								new android.content.DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog,
											int which) {
										// 事件
										String ip = edit.getText().toString()
												.trim();
										if (ip.equals("")) {
											com.jnwat.tools.ToastViewTools
													.initToast(getActivity(),
															"请输入IP");
										} else {
											com.jnwat.tools.SharedPrefsUtil
													.putSETTINGIP(
															getActivity(),
															"http://" + ip
																	+ ":");
											AppConfig.WEB_IP_PROT = "http://"
													+ ip + ":"
													+ AppConfig.WEBPROT + "/"
													+ AppConfig.WEBSERVICE_SW;
											com.jnwat.tools.ToastViewTools
													.initToast(getActivity(),
															"修改完成");
											System.out
													.println("  AppConfig.WEB_IP_PROT--"
															+ AppConfig.WEB_IP_PROT);
										}

									}
								}).setNegativeButton("取消", null).create()
						.show();

			}
		});

	}

	Handler mainHandler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			int x = msg.what;
			switch (x) {
			case 101:
				ContactsUpdating = false;
				closeUpdateTip();
				changeLoginState();
				break;
			case 201:// 清除缓存
				txt_cachesize.setText(size + "M");
				txt_cachesize.setVisibility(View.VISIBLE);
				progress_wheel_clearcache.setVisibility(View.INVISIBLE);
				break;

			}
		}

	};
   
	/**
	 * 同步通讯录
	 */
	public void getData() {
		http = new HttpUtils();
		final File file = new File(mApp.getCONTACTS_PATH());
		if (!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		http.send(HttpRequest.HttpMethod.POST, AppConfig.getIp(mContext)
				+ AppConfig.METHOAD_GETTEACHERCONTACTS,
				new RequestCallBack<String>() {
					@Override
					public void onLoading(long total, long current,
							boolean isUploading) {
                         
					}

					@Override
					public void onSuccess(ResponseInfo<String> responseInfo) {
						LogUtils.d("responseInfo.result:" + responseInfo.result);
						try {
							JSONObject obj = new JSONObject(responseInfo.result);
							if (!"200".equals(obj.getString("Status"))) {
								Toast.makeText(mContext, "同步失败",
										Toast.LENGTH_SHORT).show();
								return;

							}
						} catch (JSONException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
							LogUtils.i("analysis maillist exception >>>>>>>>>>");
						}
						byte[] byt = responseInfo.result.getBytes();
						ContactsFileSize = byt.length + 20;// wz
						WriteRawStringFile.write(file, responseInfo.result);
						SharedPrefsUtil.putExistContacts(mContext, true);
						ToastViewTools.initToast(mContext, "同步完成");
						Toast.makeText(mContext, "同步完成", Toast.LENGTH_SHORT)
								.show();
						LogUtils.i("通讯录信息："+responseInfo.result);
						new delayExecute().execute(0);
					}

					@Override
					public void onStart() {
					}

					@Override
					public void onFailure(HttpException error, String msg) {
						Toast.makeText(mContext, "同步失败", Toast.LENGTH_SHORT)
								.show();
						new delayExecute().execute(450);
						//noticeContactsUpdatComp();
					}
				});

		/*
		 * txt_userlogin.setOnClickListener(new OnClickListener() {//跳转到登录
		 * 
		 * @Override public void onClick(View arg0) { // TODO Auto-generated
		 * method stub Intent intent = new Intent();
		 * intent.setClass(getActivity(), LoginActivity.class);
		 * startActivity(intent);
		 * 
		 * } });
		 */
		/*
		 * txt_usersafe.setOnClickListener(new OnClickListener() {//跳转到登录
		 * 
		 * @Override public void onClick(View arg0) { // TODO Auto-generated
		 * method stub
		 * 
		 * new SnackBar(getActivity(),
		 * "Do you want change color of this button to red?", "yes", new
		 * OnClickListener() {
		 * 
		 * @Override public void onClick(View arg0) { // TODO Auto-generated
		 * method stub ToastViewTools.initToast(getActivity(), "LALBeHappy"); }
		 * 
		 * }).show(); } });
		 */
	}

	// 退出键 延迟显示
	public class delay_exit extends AsyncTask<Void, Void, Void> {

		@Override
		protected Void doInBackground(Void... arg0) {
			// TODO Auto-generated method stub
			try {

				if (BUserlogin.loginStatus == 1) {
					BIntentObj.recover();
					BUserlogin.loginStatus = 0; // 改变登录状态
					
					UserInfo user = new UserInfo();
					user.setName("");
					user.setPasswd("");
					com.jnwat.tools.SharedPrefsUtil
							.putUserLogin(mContext, user);
				}
				Thread.sleep(700);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			changeLoginState();
			exitBtn.setVisibility(View.VISIBLE);
			progress_wheel_exit.setVisibility(View.GONE);
		}

	}

	// 展示 更新的提示 这里没有进度 只是给一个提示
	public void showUpdateTip() {
		mDialog.setVisibility(View.VISIBLE);
	}

	// 当更新数据的操作完成（无论更新成功还是失败 ）都将关闭更新提示
	public void closeUpdateTip() {
		mDialog.setVisibility(View.GONE);
	}

	
	public class delayExecute extends AsyncTask<Integer,Void,Void>{

		@Override
		protected Void doInBackground(Integer... params) {
			// TODO Auto-generated method stub
			try {
				Thread.sleep(params[0]);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			ContactsUpdating = false;
			closeUpdateTip();
			changeLoginState();
		}
		
	}

	@Override
	public void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		changeLoginState();
	}

	/**
	 * 设置缓存大小
	 */
	private void setCacheSize() {
		try {
			// 文件大小
			size = (long) (GetFileCacheSize.getFolderSize(new File(SDCardTools
					.getFilePath().toString())) + 0.00);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		mBitmapUtils.cancel();
	}
}
